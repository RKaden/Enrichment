package dev.kadenr.game;

import java.awt.Graphics;
import java.awt.image.BufferStrategy;

import dev.kadenr.game.display.Display;
import dev.kadenr.game.gfx.Assets;
import dev.kadenr.game.states.GameState;
import dev.kadenr.game.states.State;


public class Game implements Runnable {
	
	private Display display;
	public int width, height;
	public String title;
	
	private boolean running = false;
	//thread variable makes own little program within big program
	private Thread thread;
	
	private BufferStrategy bs;
	private Graphics g;
	
	//States
	private State gameState;
	
	//requirements of game
	public Game(String title,int width, int height) {
		this.width = width;
		this.height = height;
		this.title = title;
		
	}
	//Initializes all graphics.
	private void inti() {
		display = new Display(title, width, height);
		Assets.init();
		
		gameState = new GameState();
		State.setState(gameState);
	}
	
	
	//updates everything
	private void tick() {
		if(State.getState() != null) 
			State.getState().tick();
	}
	
	//renders everything
	private void render() {
		bs = display.getCanvas().getBufferStrategy();
		if(bs == null) {
			display.getCanvas().createBufferStrategy(3);
			return;
		}
		g = bs.getDrawGraphics();
		//Clear the screen
		g.clearRect(0, 0, width, height);
		
		//StartDrawing
		
		if(State.getState() != null) 
			State.getState().render(g);
		
		//Ends drawing
		bs.show();
		g.dispose();
		
	}
	
	//must be in program to have thread
	public void run() {
		
		inti();
		
		int fps = 60;
		//measures time in nanoseconds
		double timePerTick = 1000000000/ fps;
		double delta = 0;
		long now;
		//returns time in nanoseconds
		long lastTime = System.nanoTime();
		//fps counter
		long timer = 0;
		int ticks = 0;
		
		while(running) {
			now = System.nanoTime();
			delta += (now - lastTime) / timePerTick;
			timer += now - lastTime;
			lastTime = now;
			
			if(delta >= 1) {
				tick();
				render();
				ticks++;
				delta--;
			}
			
			//checks fps
			if(timer>= 1000000000) {
				System.out.println("Ticks and Frames:" + ticks);
				ticks = 0;
				timer = 0;
			}
		}
		//just in case it didn't stop
		stop();
	}
	
	//starts thread
	public synchronized void start() {
		//stops program from starting twice and giving bunch of errors
		if(running)
			return;
		running = true;
		//runs this class that's why has this within the new thread
		thread = new Thread(this);
		thread.start();
	}
	
	public synchronized void stop() {
		//stops program from stopping twice and giving bunch of errors
		if(!running)
			return;
		running = false;
		//must be connected to a try catch statement
		try {
			thread.join();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}
}
